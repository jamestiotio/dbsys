package simpledb.execution;

import simpledb.transaction.TransactionAbortedException;
import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {
    private static final long serialVersionUID = 1L;
    private OpIterator child1;
    private OpIterator child2;
    private JoinPredicate jp;
    private Tuple currentTuple;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        this.jp = p;
        this.child1 = child1;
        this.child2 = child2;
    }

    public JoinPredicate getJoinPredicate() {
        return this.jp;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        return this.child1.getTupleDesc().getFieldName(this.jp.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        return this.child2.getTupleDesc().getFieldName(this.jp.getField2());
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(this.child1.getTupleDesc(), this.child2.getTupleDesc());
    }

    @Override
    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        this.child1.open();
        this.child2.open();
        super.open();
        if (!this.checkAndSetNextTuple(child1)) {
            throw new NoSuchElementException();
        }
    }

    @Override
    public void close() {
        super.close();
        this.child1.close();
        this.child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        this.child1.rewind();
        this.child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // TODO: This is a simple, naive nested loop join. Future work might
        // include improving this implementation to a much better and
        // speedier/faster method (explore some algorithms such as sort-merge
        // join, block nested-loop join, double block nested-loop join, etc.).
        do {
            Tuple t1 = this.currentTuple;
            while (this.child2.hasNext()) {
                Tuple t2 = this.child2.next();
                if (this.jp.filter(t1, t2)) {
                    return this.joinTuples(t1, t2);
                }
            }
            this.child2.rewind();
        } while (this.checkAndSetNextTuple(this.child1));

        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        return new OpIterator[] { this.child1, this.child2 };
    }

    @Override
    public void setChildren(OpIterator[] children) {
        if (this.child1 != children[0]) {
            this.child1 = children[0];
        }

        if (this.child2 != children[1]) {
            this.child2 = children[1];
        }
    }

    /**
     * Creates a new tuple from two existing tuples.
     * @param t1 the first Tuple to join
     * @param t2 the second Tuple to join with the first
     * @return the joined Tuple
     */
    private Tuple joinTuples(Tuple t1, Tuple t2) {
        Tuple joinedTuple = new Tuple(this.getTupleDesc());

        for (int i = 0; i < t1.getNumFields(); i++) {
            joinedTuple.setField(i, t1.getField(i));
        }

        for (int j = 0; j < t2.getNumFields(); j++) {
            joinedTuple.setField(j + t1.getNumFields(), t2.getField(j));
        }

        return joinedTuple;
    }

    /**
     * We need to keep track of the current tuple in the left-side of the join loop in order
     * to continue from where we've left off from the last returned join tuple in fetchNext()
     *
     * @param child the iterator whose next tuple will be checked and set
     * @return true if the iterator has a next tuple
     * @throws TransactionAbortedException
     * @throws DbException
     */
    private boolean checkAndSetNextTuple(OpIterator child)
            throws TransactionAbortedException, DbException {
        if (child.hasNext()) {
            this.currentTuple = child.next();
            return true;
        } else {
            return false;
        }
    }
}
